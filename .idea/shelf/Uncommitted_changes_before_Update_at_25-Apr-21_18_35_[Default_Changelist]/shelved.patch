Index: app/src/main/res/layout/activity_create_group.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:paddingBottom=\"15dp\"\r\n    android:paddingLeft=\"15dp\"\r\n    android:paddingRight=\"15dp\"\r\n    android:paddingTop=\"15dp\"\r\n    tools:context=\".CreateGroupActivity\">\r\n\r\n    <Button\r\n        android:id=\"@+id/button\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:text=\"Create\"\r\n        android:layout_alignParentTop=\"true\"\r\n        android:layout_alignParentEnd=\"true\"/>\r\n\r\n    <EditText\r\n        android:id=\"@+id/editTextTextPersonName\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_alignParentStart=\"true\"\r\n        android:layout_alignParentTop=\"true\"\r\n        android:ems=\"10\"\r\n        android:inputType=\"textPersonName\"\r\n        android:padding=\"12dp\" />\r\n\r\n    <androidx.recyclerview.widget.RecyclerView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\" />\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_create_group.xml	(revision 03539f7b7f34bd3b035d86cbd804a0867c4092a7)
+++ app/src/main/res/layout/activity_create_group.xml	(date 1619354985105)
@@ -10,26 +10,71 @@
     android:paddingTop="15dp"
     tools:context=".CreateGroupActivity">
 
-    <Button
-        android:id="@+id/button"
+    <de.hdodenhof.circleimageview.CircleImageView
+        android:id="@+id/groupicon"
+        android:layout_width="75dp"
+        android:layout_height="75dp"
+        android:layout_marginHorizontal="10dp"
+        android:src="@drawable/ic_user"
+        app:civ_border_color="#FF000000"
+        app:civ_border_width="1dp"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentStart="true"/>
+
+    <ImageView
+        android:id="@+id/plus"
+        android:layout_width="20dp"
+        android:layout_height="20dp"
+        android:layout_alignEnd="@id/groupicon"
+        app:srcCompat="@drawable/ic_plus"/>
+
+    <TextView
+        android:id="@+id/textView2"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="Create"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentEnd="true"/>
+        android:layout_marginHorizontal="12dp"
+        android:layout_below="@id/groupicon"
+        android:text="Group Icon"
+        android:layout_alignParentStart="true"/>
 
     <EditText
-        android:id="@+id/editTextTextPersonName"
+        android:id="@+id/txgroupname"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_alignParentStart="true"
+        android:layout_alignParentEnd="true"
         android:layout_alignParentTop="true"
         android:ems="10"
+        android:hint="Group Name"
         android:inputType="textPersonName"
         android:padding="12dp" />
 
+    <EditText
+        android:id="@+id/txgroupdesc"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dp"
+        android:layout_alignParentEnd="true"
+        android:layout_below="@+id/txgroupname"
+        android:ems="10"
+        android:hint="Group Description"
+        android:inputType="textMultiLine"
+        android:paddingLeft="12dp"
+        />
+    <Button
+        android:id="@+id/creategroup"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Create"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentEnd="true" />
+
+
+
     <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/chatRecyclerView"
         android:layout_width="match_parent"
-        android:layout_height="match_parent" />
-
+        android:layout_height="match_parent"
+        android:layout_marginTop="15dp"
+        android:layout_marginBottom="100dp"
+        android:layout_below="@+id/txgroupdesc"/>
 </RelativeLayout>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Sat Apr 17 17:09:14 IST 2021\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.5-bin.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision 03539f7b7f34bd3b035d86cbd804a0867c4092a7)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1619328838992)
@@ -1,6 +1,6 @@
-#Sat Apr 17 17:09:14 IST 2021
+#Wed Apr 21 20:03:53 IST 2021
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-all.zip
Index: app/src/main/java/com/example/chatapplication/CreateGroupActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.chatapplication;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.os.Bundle;\r\n\r\npublic class CreateGroupActivity extends AppCompatActivity {\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_create_group);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/chatapplication/CreateGroupActivity.java	(revision 03539f7b7f34bd3b035d86cbd804a0867c4092a7)
+++ app/src/main/java/com/example/chatapplication/CreateGroupActivity.java	(date 1619354913337)
@@ -1,14 +1,304 @@
 package com.example.chatapplication;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.appcompat.app.AppCompatActivity;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
 
+import android.content.Intent;
+import android.graphics.Color;
+import android.net.Uri;
 import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.example.chatapplication.Fragments.ChatsFragment;
+import com.example.chatapplication.Models.Friend;
+import com.example.chatapplication.Models.Group;
+import com.example.chatapplication.Models.MessagesModel;
+import com.example.chatapplication.Models.Users;
+import com.example.chatapplication.databinding.ActivityAddFriendBinding;
+import com.example.chatapplication.databinding.ActivityCreateGroupBinding;
+import com.example.chatapplication.databinding.FragmentChatsBinding;
+import com.firebase.ui.database.FirebaseRecyclerAdapter;
+import com.firebase.ui.database.FirebaseRecyclerOptions;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.ValueEventListener;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
+import com.google.firebase.storage.UploadTask;
+import com.squareup.picasso.Picasso;
+
+import java.util.ArrayList;
+import java.util.Date;
 
 public class CreateGroupActivity extends AppCompatActivity {
-
+    View FriendView;
+    RecyclerView friendList;
+    ActivityCreateGroupBinding binding;
+    static ArrayList<Users> list = new ArrayList<>();
+    static ArrayList<String> selectedUsers = new ArrayList<>();
+    FirebaseDatabase database;
+    DatabaseReference frdRef, usersRef;
+    FirebaseAuth auth;
+    FirebaseStorage storage;
+    String currentUserId;
+    Uri sFile;
+    boolean isSelectMode = false;
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_create_group);
-    }
+        binding = ActivityCreateGroupBinding.inflate(getLayoutInflater());
+        //setContentView(R.layout.activity_create_group);
+        setContentView(binding.getRoot());
+        friendList = (RecyclerView) findViewById(R.id.chatRecyclerView);
+        friendList.setLayoutManager(new LinearLayoutManager(this));
+
+        auth = FirebaseAuth.getInstance();
+        storage = FirebaseStorage.getInstance();
+        currentUserId = auth.getCurrentUser().getUid();
+        frdRef = FirebaseDatabase.getInstance().getReference().child("UsersFriend").child(currentUserId);
+        usersRef = FirebaseDatabase.getInstance().getReference().child("Users");
+
+
+        FirebaseRecyclerOptions options = new FirebaseRecyclerOptions.Builder<Friend>()
+                .setQuery(frdRef, Friend.class).build();
+
+        FirebaseRecyclerAdapter<Friend, CreateGroupActivity.FriendViewHolder> adapter = new FirebaseRecyclerAdapter<Friend, CreateGroupActivity.FriendViewHolder>(options) {
+            @Override
+            protected void onBindViewHolder(@NonNull FriendViewHolder holder, int position, @NonNull Friend model) {
+                String usersIds = getRef(position).getKey();
+                final Users[] users = {new Users()};
+
+                usersRef.child(usersIds).addValueEventListener(new ValueEventListener() {
+                    @Override
+                    public void onDataChange(@NonNull DataSnapshot snapshot) {
+                        users[0] = snapshot.getValue(Users.class);
+                        /*String profilePic = snapshot.child("profilepic").getValue().toString();
+                        String username = snapshot.child("userName").getValue().toString();
+*/
+                        holder.userName.setText(users[0].getUserName());
+                        Picasso.get().load(users[0].getProfilepic()).placeholder(R.drawable.avatar).into(holder.image);
+                        FirebaseDatabase.getInstance().getReference().child("chats").child(currentUserId+users[0].getUserId()).orderByChild("timestamp")
+                                .limitToLast(1).addListenerForSingleValueEvent(new ValueEventListener() {
+                            @Override
+                            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                                if(snapshot.hasChildren()){
+                                    for (DataSnapshot snapshot1: snapshot.getChildren()){
+                                        if((snapshot1.child("type").getValue().toString()).equals("text"))
+                                            holder.lastMessage.setText(snapshot1.child("message").getValue(String.class));
+                                        else
+                                            holder.lastMessage.setText("image");
+                                    }
+                                }
+                            }
+                            @Override
+                            public void onCancelled(@NonNull DatabaseError error) {
+                            }
+                        });
+                    }
+
+                    @Override
+                    public void onCancelled(@NonNull DatabaseError error) {
+
+                    }
+                });
+               /* holder.itemView.setOnLongClickListener(new View.OnLongClickListener() {
+                    @Override
+                    public boolean onLongClick(View v) {
+                        isSelectMode = true;
+                        if(selectedUsers.contains(users[0])) {
+                            holder.itemView.setBackgroundColor(Color.TRANSPARENT);
+                            selectedUsers.remove(users[0]);
+                        }
+                        else {
+                            holder.itemView.setBackgroundColor(Color.CYAN);
+                            selectedUsers.add(users[0]);
+                        }
+                        if(selectedUsers.size() == 0)
+                            isSelectMode = false;
+                        return true;
+                    }
+                });*/
+                holder.itemView.setOnClickListener((view) -> {
+                    if(true) {
+                        if(selectedUsers.contains(users[0].getUserId())) {
+                            holder.itemView.setBackgroundColor(Color.TRANSPARENT);
+                            selectedUsers.remove(users[0].getUserId());
+                        }
+                        else {
+                            holder.itemView.setBackgroundColor(Color.CYAN);
+                            selectedUsers.add(users[0].getUserId());
+                        }
+                        if(selectedUsers.size() == 0)
+                            isSelectMode = false;
+                    }
+                });
+            }
+
+            @NonNull
+            @Override
+            public CreateGroupActivity.FriendViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.sample_show_user,parent,false);
+                CreateGroupActivity.FriendViewHolder viewHolder = new CreateGroupActivity.FriendViewHolder(view);
+                return viewHolder;
+            }
+        };
+        friendList.setAdapter(adapter);
+        adapter.startListening();
+
+        binding.creategroup.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(binding.txgroupname.getText().toString().isEmpty())
+                    Toast.makeText(CreateGroupActivity.this, "Group Name cant be empty", Toast.LENGTH_SHORT).show();
+                else {
+                    String gname = binding.txgroupname.getText().toString();
+                    Group newGroup = new Group();
+                    newGroup.setGroupAdminId(currentUserId);
+                    newGroup.setGroupName(gname);
+                    newGroup.setGroupDesc(binding.txgroupdesc.getText().toString());
+                    newGroup.setCreatedAt(new Date().getTime());
+                    newGroup.setGroupMembers(selectedUsers);
+                    DatabaseReference groupMetaRef = FirebaseDatabase.getInstance().getReference().child("GroupsMeta").push();
+                    String gId = groupMetaRef.getKey();
+                    newGroup.setGroupId(gId);
+                    final StorageReference reference = storage.getReference().child("group_pictures")
+                            .child(gId);
+                    reference.putFile(sFile).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
+                        @Override
+                        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
+                            reference.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
+                                @Override
+                                public void onSuccess(Uri uri) {
+                                    FirebaseDatabase.getInstance().getReference().child("GroupsMeta").child(gId)
+                                            .child("groupIcon").setValue(uri.toString());
+                                    Toast.makeText(CreateGroupActivity.this, "Group Created", Toast.LENGTH_SHORT).show();
+                                    Intent intent = new Intent(CreateGroupActivity.this, MainActivity.class);
+                                    startActivity(intent);
+                                }
+                            });
+                        }
+                    });
+                    groupMetaRef.setValue(newGroup).addOnSuccessListener(new OnSuccessListener<Void>() {
+                        @Override
+                        public void onSuccess(Void aVoid) {
+
+                        }
+                    });
+                }
+            }
+        });
+        binding.plus.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent();
+                intent.setAction(Intent.ACTION_GET_CONTENT);
+                intent.setType("image/*");
+                startActivityForResult(intent, 33);
+            }
+        });
+    }
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if(data.getData() != null) {
+            sFile = data.getData();
+            binding.groupicon.setImageURI(sFile);
+        }
+    }
+
+
+/*
+    @Override
+    public void onStart() {
+        super.onStart();
+        FirebaseRecyclerOptions options = new FirebaseRecyclerOptions.Builder<Friend>()
+                .setQuery(frdRef, Friend.class).build();
+
+        FirebaseRecyclerAdapter<Friend, CreateGroupActivity.FriendViewHolder> adapter = new FirebaseRecyclerAdapter<Friend, CreateGroupActivity.FriendViewHolder>(options) {
+            @Override
+            protected void onBindViewHolder(@NonNull FriendViewHolder holder, int position, @NonNull Friend model) {
+                String usersIds = getRef(position).getKey();
+                final Users[] users = {new Users()};
+                usersRef.child(usersIds).addValueEventListener(new ValueEventListener() {
+                    @Override
+                    public void onDataChange(@NonNull DataSnapshot snapshot) {
+                        users[0] = snapshot.getValue(Users.class);
+                        /*String profilePic = snapshot.child("profilepic").getValue().toString();
+                        String username = snapshot.child("userName").getValue().toString();
+
+                        holder.userName.setText(users[0].getUserName());
+                        Picasso.get().load(users[0].getProfilepic()).placeholder(R.drawable.avatar).into(holder.image);
+                        FirebaseDatabase.getInstance().getReference().child("chats").child(currentUserId+users[0].getUserId()).orderByChild("timestamp")
+                                .limitToLast(1).addListenerForSingleValueEvent(new ValueEventListener() {
+                            @Override
+                            public void onDataChange(@NonNull DataSnapshot snapshot) {
+                                if(snapshot.hasChildren()){
+                                    for (DataSnapshot snapshot1: snapshot.getChildren()){
+                                        if((snapshot1.child("type").getValue().toString()).equals("text"))
+                                            holder.lastMessage.setText(snapshot1.child("message").getValue(String.class));
+                                        else
+                                            holder.lastMessage.setText("image");
+                                    }
+                                }
+                            }
+                            @Override
+                            public void onCancelled(@NonNull DatabaseError error) {
+                            }
+                        });
+                    }
+
+                    @Override
+                    public void onCancelled(@NonNull DatabaseError error) {
+
+                    }
+                });
+                holder.itemView.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        Intent intent = new Intent(this, ChatDetailActivity.class);
+                        intent.putExtra("userId", users[0].getUserId());
+                        intent.putExtra("profilePic", users[0].getProfilepic());
+                        intent.putExtra("userName", users[0].getUserName());
+                        getContext().startActivity(intent);
+                    }
+                });
+            }
+
+            @NonNull
+            @Override
+            public CreateGroupActivity.FriendViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.sample_show_user,parent,false);
+                CreateGroupActivity.FriendViewHolder viewHolder = new CreateGroupActivity.FriendViewHolder(view);
+                return viewHolder;
+            }
+        };
+        friendList.setAdapter(adapter);
+        adapter.startListening();
+    }
+*/
+    public static class FriendViewHolder extends RecyclerView.ViewHolder {
+        ImageView image;
+        TextView userName, lastMessage;
+
+    public FriendViewHolder(@NonNull View itemView) {
+            super(itemView);
+            image = itemView.findViewById(R.id.profile_image);
+            userName = itemView.findViewById(R.id.userNameList);
+            lastMessage = itemView.findViewById(R.id.lastMessage);
+        }
+    }
+
 }
\ No newline at end of file
Index: app/src/main/java/com/example/chatapplication/Fragments/ChatsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.chatapplication.Fragments;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.chatapplication.Adapters.FriendAdapter;\r\nimport com.example.chatapplication.Adapters.UsersAdapter;\r\nimport com.example.chatapplication.ChatDetailActivity;\r\nimport com.example.chatapplication.Models.Friend;\r\nimport com.example.chatapplication.Models.Users;\r\nimport com.example.chatapplication.R;\r\nimport com.example.chatapplication.databinding.FragmentChatsBinding;\r\nimport com.firebase.ui.database.FirebaseRecyclerAdapter;\r\nimport com.firebase.ui.database.FirebaseRecyclerOptions;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class ChatsFragment extends Fragment {\r\n\r\n    View FriendView;\r\n    RecyclerView friendList;\r\n\r\n    FragmentChatsBinding binding;\r\n    //ArrayList<String> list = new ArrayList<>();\r\n    ArrayList<Users> list = new ArrayList<>();\r\n    FirebaseDatabase database;\r\n    DatabaseReference frdRef, usersRef;\r\n    FirebaseAuth auth;\r\n    String currentUserId;\r\n\r\n    public ChatsFragment(){\r\n\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        FriendView = inflater.inflate(R.layout.fragment_chats, container, false);\r\n        friendList = (RecyclerView) FriendView.findViewById(R.id.chatRecyclerView);\r\n        friendList.setLayoutManager(new LinearLayoutManager(getContext()));\r\n\r\n        auth = FirebaseAuth.getInstance();\r\n        currentUserId = auth.getCurrentUser().getUid();\r\n        frdRef = FirebaseDatabase.getInstance().getReference().child(\"UsersFriend\").child(currentUserId);\r\n        usersRef = FirebaseDatabase.getInstance().getReference().child(\"Users\");\r\n\r\n\r\n        return FriendView;\r\n    }\r\n\r\n    @Override\r\n    public void onStart() {\r\n        super.onStart();\r\n        FirebaseRecyclerOptions options = new FirebaseRecyclerOptions.Builder<Friend>()\r\n                .setQuery(frdRef, Friend.class).build();\r\n\r\n        FirebaseRecyclerAdapter<Friend, FriendViewHolder> adapter = new FirebaseRecyclerAdapter<Friend, FriendViewHolder>(options) {\r\n            @Override\r\n            protected void onBindViewHolder(@NonNull FriendViewHolder holder, int position, @NonNull Friend model) {\r\n                String usersIds = getRef(position).getKey();\r\n                final Users[] users = {new Users()};\r\n                usersRef.child(usersIds).addValueEventListener(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        users[0] = snapshot.getValue(Users.class);\r\n                        /*String profilePic = snapshot.child(\"profilepic\").getValue().toString();\r\n                        String username = snapshot.child(\"userName\").getValue().toString();\r\n*/\r\n                        holder.userName.setText(users[0].getUserName());\r\n                        Picasso.get().load(users[0].getProfilepic()).placeholder(R.drawable.avatar).into(holder.image);\r\n                        FirebaseDatabase.getInstance().getReference().child(\"chats\").child(currentUserId+users[0].getUserId()).orderByChild(\"timestamp\")\r\n                                .limitToLast(1).addListenerForSingleValueEvent(new ValueEventListener() {\r\n                            @Override\r\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                                if(snapshot.hasChildren()){\r\n                                    for (DataSnapshot snapshot1: snapshot.getChildren()){\r\n                                        if((snapshot1.child(\"type\").getValue().toString()).equals(\"text\"))\r\n                                            holder.lastMessage.setText(snapshot1.child(\"message\").getValue(String.class));\r\n                                        else\r\n                                            holder.lastMessage.setText(\"image\");\r\n                                    }\r\n                                }\r\n                            }\r\n                            @Override\r\n                            public void onCancelled(@NonNull DatabaseError error) {\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n                holder.itemView.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        Intent intent = new Intent(getContext(), ChatDetailActivity.class);\r\n                        intent.putExtra(\"userId\", users[0].getUserId());\r\n                        intent.putExtra(\"profilePic\", users[0].getProfilepic());\r\n                        intent.putExtra(\"userName\", users[0].getUserName());\r\n                        getContext().startActivity(intent);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @NonNull\r\n            @Override\r\n            public FriendViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.sample_show_user,parent,false);\r\n                FriendViewHolder viewHolder = new FriendViewHolder(view);\r\n                return viewHolder;\r\n            }\r\n        };\r\n        friendList.setAdapter(adapter);\r\n        adapter.startListening();\r\n    }\r\n\r\n    public static class FriendViewHolder extends RecyclerView.ViewHolder {\r\n        ImageView image;\r\n        TextView userName, lastMessage;\r\n        public FriendViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            image = itemView.findViewById(R.id.profile_image);\r\n            userName = itemView.findViewById(R.id.userNameList);\r\n            lastMessage = itemView.findViewById(R.id.lastMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Inflate the layout for this fragment\r\n        /*binding = FragmentChatsBinding.inflate(inflater,container,false);\r\n\r\n        database = FirebaseDatabase.getInstance();\r\n        UsersAdapter adapter = new UsersAdapter(list,getContext());\r\n        //FriendAdapter adapter = new FriendAdapter(list,getContext());\r\n\r\n        binding.chatRecyclerView.setAdapter(adapter);\r\n\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(getContext());\r\n        binding.chatRecyclerView.setLayoutManager(layoutManager);\r\n        final Users[] user = new Users[1];\r\n        database.getReference().child(\"UsersFriend\").child(FirebaseAuth.getInstance().getUid())\r\n                .addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if(snapshot.exists()){\r\n                    list.clear();\r\n                    for(DataSnapshot frddataSnapshot : snapshot.getChildren()) {\r\n                        System.out.println(frddataSnapshot.getKey());\r\n                        database.getReference().child(\"Users\").child(frddataSnapshot.getKey())\r\n                                .addValueEventListener(new ValueEventListener() {\r\n                                    @Override\r\n                                    public void onDataChange(@NonNull DataSnapshot infosnapshot) {\r\n                                        Users users = infosnapshot.getValue(Users.class);\r\n                                        users.setUserId(infosnapshot.getKey());\r\n                                        list.add(users);\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                                    }\r\n                                });\r\n                        //list.add(user[0]);\r\n                    }\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n        /*database.getReference().child(\"UsersFriend\").child(FirebaseAuth.getInstance().getUid()).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                list.clear();\r\n                for(DataSnapshot dataSnapshot : snapshot.getChildren()) {\r\n                    String frdId = dataSnapshot.getKey();\r\n                    System.out.println(frdId);\r\n                    list.add(frdId);\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });*/\r\n/*\r\n        database.getReference().child(\"Users\").addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                list.clear();\r\n                for(DataSnapshot dataSnapshot : snapshot.getChildren()){\r\n                    Users users = dataSnapshot.getValue(Users.class);\r\n                    users.setUserId(dataSnapshot.getKey());\r\n                    if (!users.getUserId().equals(FirebaseAuth.getInstance().getUid())){\r\n                    list.add(users);}\r\n                }\r\n                adapter.notifyDataSetChanged();\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n        return binding.getRoot();*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/chatapplication/Fragments/ChatsFragment.java	(revision 03539f7b7f34bd3b035d86cbd804a0867c4092a7)
+++ app/src/main/java/com/example/chatapplication/Fragments/ChatsFragment.java	(date 1619330914361)
@@ -2,20 +2,17 @@
 
 import android.content.Intent;
 import android.os.Bundle;
-
-import androidx.annotation.NonNull;
-import androidx.fragment.app.Fragment;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import com.example.chatapplication.Adapters.FriendAdapter;
-import com.example.chatapplication.Adapters.UsersAdapter;
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
 import com.example.chatapplication.ChatDetailActivity;
 import com.example.chatapplication.Models.Friend;
 import com.example.chatapplication.Models.Users;
@@ -23,15 +20,12 @@
 import com.example.chatapplication.databinding.FragmentChatsBinding;
 import com.firebase.ui.database.FirebaseRecyclerAdapter;
 import com.firebase.ui.database.FirebaseRecyclerOptions;
-import com.google.android.gms.tasks.OnCompleteListener;
-import com.google.android.gms.tasks.Task;
 import com.google.firebase.auth.FirebaseAuth;
 import com.google.firebase.database.DataSnapshot;
 import com.google.firebase.database.DatabaseError;
 import com.google.firebase.database.DatabaseReference;
 import com.google.firebase.database.FirebaseDatabase;
 import com.google.firebase.database.ValueEventListener;
-import com.google.firebase.iid.FirebaseInstanceId;
 import com.squareup.picasso.Picasso;
 
 import java.util.ArrayList;
Index: app/src/main/java/com/example/chatapplication/ChatDetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.chatapplication;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\n\r\nimport android.app.ProgressDialog;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.chatapplication.Adapters.ChatAdapter;\r\nimport com.example.chatapplication.Models.MessagesModel;\r\nimport com.example.chatapplication.Models.Users;\r\nimport com.example.chatapplication.Models.Video_Call;\r\nimport com.example.chatapplication.databinding.ActivityChatDetailBinding;\r\nimport com.google.android.gms.tasks.Continuation;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.OnProgressListener;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.Locale;\r\nimport java.util.UUID;\r\n\r\nimport static java.lang.String.*;\r\n\r\npublic class  ChatDetailActivity extends AppCompatActivity {\r\n\r\n    private FirebaseStorage storage;\r\n    private StorageReference storageReference;\r\n    private static final int REQUEST_IMAGE_GET = 5;\r\n    ActivityChatDetailBinding binding;\r\n    FirebaseUser user;\r\n    FirebaseDatabase database;\r\n    FirebaseAuth auth;\r\n    ImageView imgView;\r\n    private static String inputFormat = \"HH:mm\";\r\n    SimpleDateFormat inputParser = new SimpleDateFormat(inputFormat, Locale.getDefault());\r\n    Calendar calendar = Calendar.getInstance();\r\n    public Uri datafile;\r\n    private String imageUrl;\r\n    private String  receiver;\r\n    private String message;\r\n    private DatabaseReference reference;\r\n    private Boolean notify = false;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        storage = FirebaseStorage.getInstance();\r\n        storageReference = storage.getReference();\r\n        binding = ActivityChatDetailBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        getSupportActionBar().hide();\r\n        database = FirebaseDatabase.getInstance();\r\n        auth = FirebaseAuth.getInstance();\r\n        user = FirebaseAuth.getInstance().getCurrentUser();\r\n        String currentUser = user.getUid();\r\n\r\n        final String[] currentUsername = new String[1];\r\n        //Get User name of currently logged in user.\r\n        database.getReference(\"Users\")\r\n                .child(currentUser)\r\n                .addListenerForSingleValueEvent(new ValueEventListener() {\r\n                    @Override\r\n                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                        currentUsername[0] = snapshot.child(\"userName\").getValue().toString();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                    }\r\n                });\r\n\r\n\r\n        final  String senderId = auth.getUid();\r\n        String receivedId = getIntent().getStringExtra(\"userId\");\r\n        receiver=receivedId;\r\n        String userName = getIntent().getStringExtra(\"userName\");\r\n        String profilePic = getIntent().getStringExtra(\"profilePic\");\r\n\r\n        binding.userName.setText(userName);\r\n        Picasso.get().load(profilePic).placeholder(R.drawable.avatar).into(binding.profilePic);\r\n\r\n        binding.backArrow.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                Intent intent = new Intent(ChatDetailActivity.this,MainActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        // Video Call\r\n        final String senderRoom = senderId + receivedId;\r\n        final  String receiverRoom = receivedId + senderId;\r\n        binding.videoCallIcon.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                String call_time = valueOf(Calendar.getInstance().get(Calendar.HOUR))+\":\"+ valueOf(Calendar.getInstance().get(Calendar.MINUTE));\r\n                int year = Calendar.getInstance().get(Calendar.YEAR);\r\n                int month = Calendar.getInstance().get(Calendar.MONTH);\r\n                int day = Calendar.getInstance().get(Calendar.DATE);\r\n                final Video_Call video_call= new Video_Call(currentUsername[0],senderRoom,receiverRoom,call_time,day,month,year);\r\n                database.getReference()\r\n                        .child(\"video_call\")\r\n                        .child(senderRoom)\r\n                        .push()\r\n                        .setValue(video_call)\r\n                        .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                            @Override\r\n                            public void onSuccess(Void aVoid) {\r\n                                database.getReference()\r\n                                        .child(\"video_call\")\r\n                                        .child(receiverRoom)\r\n                                        .push()\r\n                                        .setValue(video_call)\r\n                                        .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                            @Override\r\n                                            public void onSuccess(Void aVoid) {\r\n\r\n                                            }\r\n                                        });\r\n                            }\r\n                        });\r\n\r\n                Intent calling = new Intent(ChatDetailActivity.this,VideoCallActivity.class);\r\n                calling.putExtra(\"userName\", currentUsername[0]);\r\n                calling.putExtra(\"friend\", userName);\r\n                calling.putExtra(\"sRoom\",senderRoom);\r\n                calling.putExtra(\"rRoom\",receiverRoom);\r\n                startActivity(calling);\r\n            }\r\n        });\r\n\r\n\r\n        //Incoming Video Call\r\n//        database.getReference()\r\n//                .child(\"video_call\")\r\n//                .child(senderRoom)\r\n//                .addValueEventListener(new ValueEventListener() {\r\n//                    @Override\r\n//                    public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n//                        // get time from database and compare with range of time\r\n//                        for(DataSnapshot snapshot1 : snapshot.getChildren()){\r\n//                            Video_Call video_call = snapshot1.getValue(Video_Call.class);\r\n//                            int year = Calendar.getInstance().get(Calendar.YEAR);\r\n//                            int month = Calendar.getInstance().get(Calendar.MONTH);\r\n//                            int day = Calendar.getInstance().get(Calendar.DATE);\r\n//                            if ( video_call.getYear() == year && video_call.getMonth() == month && video_call.getDay() == day ) {\r\n//                                // Today's Call\r\n//                                String call_time = video_call.getCall_time();\r\n//                                if ( video_call.compareDates(call_time) ){\r\n//                                    Intent incoming = new Intent(ChatDetailActivity.this,IncomingCall.class);\r\n//                                    incoming.putExtra(\"sRoom\",video_call.getsRoom());\r\n//                                    incoming.putExtra(\"rRoom\",video_call.getrRoom());\r\n//                                    incoming.putExtra(\"caller\",video_call.getUserName());\r\n//                                    startActivity(incoming);\r\n//                                }\r\n//                            } else {\r\n//                                // earlier calls\r\n//                                //Add to miss call list.\r\n//                            }\r\n//                        }\r\n//                    }\r\n//\r\n//                    @Override\r\n//                    public void onCancelled(@NonNull DatabaseError error) {\r\n//\r\n//                    }\r\n//                });\r\n\r\n\r\n        final ArrayList <MessagesModel> messagesModels = new ArrayList<>();\r\n\r\n        final ChatAdapter chatAdapter = new ChatAdapter(messagesModels, this , receivedId);\r\n\r\n        binding.chatRecyclerView.setAdapter(chatAdapter);\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(this);\r\n        binding.chatRecyclerView.setLayoutManager(layoutManager);\r\n\r\n        database.getReference().child(\"chats\").child(senderRoom).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                messagesModels.clear();\r\n                for(DataSnapshot snapshot1 : snapshot.getChildren()){\r\n                    MessagesModel model = snapshot1.getValue(MessagesModel.class);\r\n                    model.setMessageId(snapshot1.getKey());\r\n                    messagesModels.add(model);\r\n                }\r\n                chatAdapter.notifyDataSetChanged();\r\n                binding.chatRecyclerView.smoothScrollToPosition(binding.chatRecyclerView.getAdapter().getItemCount());\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n\r\n        });\r\n\r\n     // attachments\r\n        imgView = (ImageView)findViewById(R.id.attachments4);\r\n        imgView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\r\n                intent.setType(\"image/*\");\r\n                if (intent.resolveActivity(getPackageManager()) != null) {\r\n                    startActivityForResult(intent, REQUEST_IMAGE_GET);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n       /*\r\n        //Gallery Icon\r\n        imgView = findViewById(R.id.gallery);\r\n        imgView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\r\n                intent.setType(\"image/*\");\r\n                startActivityForResult(intent,1);\r\n            }\r\n        });\r\n\r\n        //Map Icon\r\n        imgView = findViewById(R.id.location);\r\n        imgView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(Intent.ACTION_VIEW);\r\n                if(intent.resolveActivity(getPackageManager())!=null){\r\n                    startActivityForResult(intent,2);\r\n                }\r\n            }\r\n        });\r\n\r\n        //Camera\r\n         imgView = findViewById(R.id.camera);\r\n         imgView.setOnClickListener(new View.OnClickListener() {\r\n             @Override\r\n             public void onClick(View v) {\r\n                     String targetFilename = \"/root\";\r\n                     Uri locationForPhotos = null;\r\n                     Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n                     intent.putExtra(MediaStore.EXTRA_OUTPUT,\r\n                             Uri.withAppendedPath(locationForPhotos, targetFilename));\r\n                     if (intent.resolveActivity(getPackageManager()) != null) {\r\n                         startActivityForResult(intent, 3);\r\n                     }\r\n             }\r\n         });\r\n\r\n         //documents\r\n         imgView = findViewById(R.id.documents);\r\n         imgView.setOnClickListener(new View.OnClickListener() {\r\n             @Override\r\n             public void onClick(View v) {\r\n                 Intent sharingIntent = new Intent(Intent.ACTION_SEND);\r\n                 sharingIntent.setType(\"text/html\");\r\n                 sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, Html.fromHtml(\"<p>This is the text shared.</p>\"));\r\n                 startActivityForResult(sharingIntent,4);\r\n             }\r\n         });\r\n          */\r\n\r\n       binding.send.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                notify=true;\r\n                message =  binding.etmessage.getText().toString();\r\n                final MessagesModel model = new MessagesModel(senderId,message);\r\n                model.setTimestamp(new Date().getTime());\r\n                binding.etmessage.setText(\"\");\r\n                database.getReference().child(\"chats\").child(senderRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        database.getReference().child(\"chats\").child(receiverRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                            @Override\r\n                            public void onSuccess(Void aVoid) {\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        final String msg = message;\r\n        reference = FirebaseDatabase.getInstance().getReference(\"Users\").child(user.getUid());\r\n        reference.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                Users user = snapshot.getValue(Users.class);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n   // Sending notification\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if(requestCode==REQUEST_IMAGE_GET && resultCode==RESULT_OK && data!=null){\r\n            datafile = data.getData();\r\n            uploadImage();\r\n        }\r\n    }\r\n\r\n    private void uploadImage() {\r\n        final ProgressDialog pd = new ProgressDialog(this);\r\n        pd.setTitle(\"Uploading Image...\");\r\n        pd.show();\r\n        final String randomKey = UUID.randomUUID().toString();\r\n        StorageReference riversRef = storageReference.child(\"images/\" + randomKey);\r\n        UploadTask uploadTask;\r\n        uploadTask = riversRef.putFile(datafile);\r\n\r\n                uploadTask.addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n                    @Override\r\n                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n                      pd.dismiss();\r\n                        Task<Uri> urlTask = uploadTask.continueWithTask(new Continuation<UploadTask.TaskSnapshot, Task<Uri>>() {\r\n                            @Override\r\n                            public Task<Uri> then(@NonNull Task<UploadTask.TaskSnapshot> task) throws Exception {\r\n                                if (!task.isSuccessful()) {\r\n                                    throw task.getException();\r\n                                }\r\n\r\n                                // Continue with the task to get the download URL\r\n                                return riversRef.getDownloadUrl();\r\n                            }\r\n                        }).addOnCompleteListener(new OnCompleteListener<Uri>() {\r\n                            @Override\r\n                            public void onComplete(@NonNull Task<Uri> task) {\r\n                                if (task.isSuccessful()) {\r\n                                    final  String senderId = auth.getUid();\r\n                                    final String senderRoom = format(\"%s%s\", senderId, receiver);\r\n                                    final String receiverRoom = format(\"%s%s\", receiver, senderId);\r\n                                    Uri downloadUri = task.getResult();\r\n                                    imageUrl = downloadUri.toString();\r\n                                    final MessagesModel model = new MessagesModel(senderId,imageUrl);\r\n                                    model.setTimestamp(new Date().getTime());\r\n                                    model.setType(\"image\");\r\n                                    database.getReference().child(\"chats\").child(senderRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                        @Override\r\n                                        public void onSuccess(Void aVoid) {\r\n                                            database.getReference().child(\"chats\").child(receiverRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                                @Override\r\n                                                public void onSuccess(Void aVoid) {\r\n\r\n                                                }\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    Toast.makeText(getApplicationContext(),\"Couldn't load Image \",Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception exception) {\r\n                        pd.dismiss();\r\n                        Toast.makeText(getApplicationContext(),\"Sorry Message was not sent successfully\",Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }).addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {\r\n            @Override\r\n            public void onProgress(@NonNull UploadTask.TaskSnapshot snapshot) {\r\n                double progressPercentage = (100* snapshot.getBytesTransferred()/ snapshot.getTotalByteCount());\r\n                int percent = (int)progressPercentage;\r\n                pd.setMessage(\"Sending: \" + percent + \"%\");\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/chatapplication/ChatDetailActivity.java	(revision 03539f7b7f34bd3b035d86cbd804a0867c4092a7)
+++ app/src/main/java/com/example/chatapplication/ChatDetailActivity.java	(date 1619345091222)
@@ -293,20 +293,25 @@
             public void onClick(View view) {
                 notify=true;
                 message =  binding.etmessage.getText().toString();
-                final MessagesModel model = new MessagesModel(senderId,message);
-                model.setTimestamp(new Date().getTime());
-                binding.etmessage.setText("");
-                database.getReference().child("chats").child(senderRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {
-                    @Override
-                    public void onSuccess(Void aVoid) {
-                        database.getReference().child("chats").child(receiverRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {
-                            @Override
-                            public void onSuccess(Void aVoid) {
+                if (message.isEmpty()) {
+                    Toast.makeText(ChatDetailActivity.this, "Enter Message", Toast.LENGTH_SHORT).show();
+                }
+                else {
+                    final MessagesModel model = new MessagesModel(senderId,message);
+                    model.setTimestamp(new Date().getTime());
+                    binding.etmessage.setText("");
+                    database.getReference().child("chats").child(senderRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {
+                        @Override
+                        public void onSuccess(Void aVoid) {
+                            database.getReference().child("chats").child(receiverRoom).push().setValue(model).addOnSuccessListener(new OnSuccessListener<Void>() {
+                                @Override
+                                public void onSuccess(Void aVoid) {
 
-                            }
-                        });
-                    }
-                });
+                                }
+                            });
+                        }
+                    });
+                }
             }
         });
 
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_21-04-2021_07_00__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_21-04-2021_07_00__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_18-04-2021_18_16__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_18-04-2021_18_16__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_23-04-2021_20_27__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_23-04-2021_20_27__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_18-04-2021_20_41__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_18-04-2021_20_41__Default_Changelist_.xml
